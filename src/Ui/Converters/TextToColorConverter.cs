using System.Windows.Data;
using System.Windows.Markup;
using System.Windows.Media;

namespace Media.Ui.Converters;

internal sealed class TextToColorConverter : MarkupExtension, IValueConverter
{
    private static readonly SolidColorBrush[] Palette = new SolidColorBrush[]
    {
        new(Color.FromRgb(0xb5,0x85,0x60)),
        new(Color.FromRgb(0xff,0xad,0x8b)),
        new(Color.FromRgb(0xff,0x9d,0x74)),
        new(Color.FromRgb(0xff,0x8a,0x59)),
        new(Color.FromRgb(0xff,0x7d,0x46)),
        new(Color.FromRgb(0xad,0x52,0x2b)),
        new(Color.FromRgb(0xd5,0x7f,0x45)),
        new(Color.FromRgb(0xff,0x9a,0x56)),
        new(Color.FromRgb(0xe4,0x80,0x3b)),
        new(Color.FromRgb(0xb5,0x5f,0x25)),
        new(Color.FromRgb(0x92,0x4b,0x1a)),
        new(Color.FromRgb(0x6d,0x37,0x13)),
        new(Color.FromRgb(0x52,0x29,0x0d)),
        new(Color.FromRgb(0x9a,0x1b,0x1b)),
        new(Color.FromRgb(0xef,0x2e,0x2e)),
        new(Color.FromRgb(0xd5,0x15,0x45)),
        new(Color.FromRgb(0xb5,0x1e,0x59)),
        new(Color.FromRgb(0x92,0x16,0x83)),
        new(Color.FromRgb(0x62,0x1c,0x80)),
        new(Color.FromRgb(0x41,0x12,0x55)),
        new(Color.FromRgb(0xba,0x83,0x2a)),
        new(Color.FromRgb(0xff,0xb4,0x3b)),
        new(Color.FromRgb(0xff,0x88,0x24)),
        new(Color.FromRgb(0xff,0x7a,0x26)),
        new(Color.FromRgb(0xff,0x62,0x24)),
        new(Color.FromRgb(0xff,0x4d,0x2c)),
        new(Color.FromRgb(0xb5,0x35,0x1d)),
        new(Color.FromRgb(0xff,0xa2,0x15)),
        new(Color.FromRgb(0xff,0x77,0x15)),
        new(Color.FromRgb(0xb2,0x53,0x0e)),
        new(Color.FromRgb(0x28,0xba,0x00)),
        new(Color.FromRgb(0x00,0x82,0x2c)),
        new(Color.FromRgb(0x00,0x58,0x39)),
        new(Color.FromRgb(0x00,0x4d,0x58)),
        new(Color.FromRgb(0x00,0x2c,0x32)),
        new(Color.FromRgb(0x3b,0x94,0xff)),
        new(Color.FromRgb(0x3b,0x6d,0xff)),
        new(Color.FromRgb(0x3b,0x3f,0xff)),
        new(Color.FromRgb(0x28,0x2b,0xb5)),
        new(Color.FromRgb(0x28,0x66,0xb5)),
        new(Color.FromRgb(0x3b,0x91,0xff)),
        new(Color.FromRgb(0x3b,0x63,0xff)),
        new(Color.FromRgb(0x3b,0x3b,0xff)),
        new(Color.FromRgb(0x46,0x2d,0xff)),
        new(Color.FromRgb(0x5d,0x21,0xff)),
        new(Color.FromRgb(0x47,0x17,0xca)),
        new(Color.FromRgb(0x6f,0x2b,0xc5)),
        new(Color.FromRgb(0x86,0x36,0xec)),
        new(Color.FromRgb(0x64,0x36,0xec)),
        new(Color.FromRgb(0x53,0x2d,0xc7)),
        new(Color.FromRgb(0x4b,0x1a,0x92)),
        new(Color.FromRgb(0x3e,0x16,0x7a)),
        new(Color.FromRgb(0x2a,0x0e,0x52)),
        new(Color.FromRgb(0xd2,0x33,0xbe)),
        new(Color.FromRgb(0xff,0x41,0xe7)),
        new(Color.FromRgb(0xd7,0x37,0x95)),
        new(Color.FromRgb(0xb5,0x23,0x79)),
        new(Color.FromRgb(0xa5,0x20,0x6e)),
        new(Color.FromRgb(0x8a,0x1b,0x54)),
        new(Color.FromRgb(0x72,0x15,0x45)),
        new(Color.FromRgb(0xb5,0x5f,0x8f)),
        new(Color.FromRgb(0xff,0x87,0xcb)),
        new(Color.FromRgb(0xff,0x71,0xc1)),
        new(Color.FromRgb(0xff,0x66,0xbd)),
        new(Color.FromRgb(0xff,0x54,0xb5)),
        new(Color.FromRgb(0xff,0x3a,0xaa)),
        new(Color.FromRgb(0xff,0x2b,0x76)),
        new(Color.FromRgb(0x2f,0x37,0x48)),
        new(Color.FromRgb(0x41,0x4d,0x65)),
        new(Color.FromRgb(0x33,0x3c,0x50)),
    };

    private static uint CalculateHash(string str)
    {
        uint hash = 2166136261;
        foreach (char c in str)
        {
            hash ^= c;
            hash *= 16777619;
        }
        return hash;
    }

    public override object ProvideValue(IServiceProvider serviceProvider)
        => this;

    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is string str)
        {
            uint hash = CalculateHash(str);
            int index = (int)(hash % Palette.Length);
            return Palette[index];
        }
        return Binding.DoNothing;
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        => Binding.DoNothing;
}
